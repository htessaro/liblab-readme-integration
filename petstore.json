{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.7",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore, UploadFileRequest } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const uploadFileRequest: UploadFileRequest = {\n    additionalMetadata: 'additionalMetadata',\n    file: file,\n  };\n\n  const { data } = await petstore.pet.uploadFile(8, input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := pet.UploadFileRequest{}\n\nresponse, err := client.Pet.UploadFile(context.Background(), int64(1234), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\nfrom petstore.models import UploadFileRequest\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = UploadFileRequest(\n    additional_metadata=\"additionalMetadata\",\n    file=\"file\"\n)\n\nresult = sdk.pet.upload_file(\n    request_body=request_body,\n    pet_id=1\n)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/pet": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Category, Pet, Petstore, Tag } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const category: Category = {\n    id: 8,\n    name: 'name',\n  };\n\n  const tag: Tag = {\n    id: 2,\n    name: 'name',\n  };\n\n  const petStatus = PetStatus.AVAILABLE;\n\n  const pet: Pet = {\n    id: 9,\n    category: category,\n    name: 'doggie',\n    photoUrls: ['photoUrls'],\n    tags: [tag],\n    status: petStatus,\n  };\n\n  const { data } = await petstore.pet.addPet(input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := pet.Pet{}\nrequest.SetName(\"Name\")\nrequest.SetPhotoUrls([]string{})\n\nresponse, err := client.Pet.AddPet(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\nfrom petstore.models import Pet\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = Pet(\n    id_=3,\n    category={\n        \"id_\": 1,\n        \"name\": \"name\"\n    },\n    name=\"doggie\",\n    photo_urls=[\n        \"photoUrls\"\n    ],\n    tags=[\n        {\n            \"id_\": 3,\n            \"name\": \"name\"\n        }\n    ],\n    status=\"available\"\n)\n\nresult = sdk.pet.add_pet(request_body=request_body)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Category, Pet, Petstore, Tag } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const category: Category = {\n    id: 8,\n    name: 'name',\n  };\n\n  const tag: Tag = {\n    id: 2,\n    name: 'name',\n  };\n\n  const petStatus = PetStatus.AVAILABLE;\n\n  const pet: Pet = {\n    id: 9,\n    category: category,\n    name: 'doggie',\n    photoUrls: ['photoUrls'],\n    tags: [tag],\n    status: petStatus,\n  };\n\n  const { data } = await petstore.pet.updatePet(input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := pet.Pet{}\nrequest.SetName(\"Name\")\nrequest.SetPhotoUrls([]string{})\n\nresponse, err := client.Pet.UpdatePet(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\nfrom petstore.models import Pet\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = Pet(\n    id_=3,\n    category={\n        \"id_\": 1,\n        \"name\": \"name\"\n    },\n    name=\"doggie\",\n    photo_urls=[\n        \"photoUrls\"\n    ],\n    tags=[\n        {\n            \"id_\": 3,\n            \"name\": \"name\"\n        }\n    ],\n    status=\"available\"\n)\n\nresult = sdk.pet.update_pet(request_body=request_body)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.pet.findPetsByStatus({\n    status: [findPetsByStatusStatus],\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nfindPetsByStatusStatus := pet.FIND_PETS_BY_STATUS_STATUS_AVAILABLE\n\nparams := pet.FindPetsByStatusRequestParams{}\nparams.SetStatus([]pet.FindPetsByStatusStatus{findPetsByStatusStatus})\n\nresponse, err := client.Pet.FindPetsByStatus(context.Background(), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\nstatus=[\n    \"available\"\n]\n\nresult = sdk.pet.find_pets_by_status(status=status)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "deprecated": true,
        "x-readme": {
          "code-samples": [
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := pet.FindPetsByTagsRequestParams{}\nparams.SetTags([]string{})\n\nresponse, err := client.Pet.FindPetsByTags(context.Background(), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            }
          ]
        }
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.pet.getPetById(3);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.Pet.GetPetById(context.Background(), int64(1234))\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.pet.get_pet_by_id(pet_id=1)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore, UpdatePetWithFormRequest } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const updatePetWithFormRequest: UpdatePetWithFormRequest = {\n    name: 'name',\n    status: 'status',\n  };\n\n  const { data } = await petstore.pet.updatePetWithForm(6, input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := pet.UpdatePetWithFormRequest{}\n\nresponse, err := client.Pet.UpdatePetWithForm(context.Background(), int64(1234), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\nfrom petstore.models import UpdatePetWithFormRequest\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = UpdatePetWithFormRequest(\n    name=\"name\",\n    status=\"status\"\n)\n\nresult = sdk.pet.update_pet_with_form(\n    request_body=request_body,\n    pet_id=6\n)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.pet.deletePet(7, {\n    apiKey: 'api_key',\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/pet\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := pet.DeletePetRequestParams{}\n\n\nresponse, err := client.Pet.DeletePet(context.Background(), int64(1234), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.pet.delete_pet(\n    pet_id=6,\n    api_key=\"api_key\"\n)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.store.getInventory();\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.Store.GetInventory(context.Background())\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.store.get_inventory()\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Order, Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const orderStatus = OrderStatus.PLACED;\n\n  const order: Order = {\n    id: 2,\n    petId: 8,\n    quantity: 1,\n    shipDate: 'shipDate',\n    status: orderStatus,\n    complete: true,\n  };\n\n  const { data } = await petstore.store.placeOrder(input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/store\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := store.Order{}\n\nresponse, err := client.Store.PlaceOrder(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\nfrom petstore.models import Order\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = Order(\n    id_=3,\n    pet_id=8,\n    quantity=7,\n    ship_date=\"shipDate\",\n    status=\"placed\",\n    complete=True\n)\n\nresult = sdk.store.place_order(request_body=request_body)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.store.getOrderById(9);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.Store.GetOrderById(context.Background(), int64(1234))\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.store.get_order_by_id(order_id=10)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.store.deleteOrder(5);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.Store.DeleteOrder(context.Background(), int64(1234))\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.store.delete_order(order_id=10)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.createUsersWithListInput(input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.CreateUsersWithListInput(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = [\n    {\n        \"id_\": 10,\n        \"username\": \"username\",\n        \"first_name\": \"firstName\",\n        \"last_name\": \"lastName\",\n        \"email\": \"email\",\n        \"password\": \"password\",\n        \"phone\": \"phone\",\n        \"user_status\": 3\n    }\n]\n\nresult = sdk.user.create_users_with_list_input(request_body=request_body)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.getUserByName('username');\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.GetUserByName(context.Background(), \"username\")\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.user.get_user_by_name(username=\"username\")\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore, User } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const user: User = {\n    id: 7,\n    username: 'username',\n    firstName: 'firstName',\n    lastName: 'lastName',\n    email: 'email',\n    password: 'password',\n    phone: 'phone',\n    userStatus: 8,\n  };\n\n  const { data } = await petstore.user.updateUser('username', input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/user\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := user.User{}\n\nresponse, err := client.User.UpdateUser(context.Background(), \"username\", request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\nfrom petstore.models import User\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = User(\n    id_=10,\n    username=\"username\",\n    first_name=\"firstName\",\n    last_name=\"lastName\",\n    email=\"email\",\n    password=\"password\",\n    phone=\"phone\",\n    user_status=3\n)\n\nresult = sdk.user.update_user(\n    request_body=request_body,\n    username=\"username\"\n)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.deleteUser('username');\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.DeleteUser(context.Background(), \"username\")\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.user.delete_user(username=\"username\")\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.loginUser({\n    username: 'username',\n    password: 'password',\n  });\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/user\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nparams := user.LoginUserRequestParams{}\nparams.SetUsername(\"string\")\nparams.SetPassword(\"string\")\n\nresponse, err := client.User.LoginUser(context.Background(), params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.user.login_user(\n    username=\"username\",\n    password=\"password\"\n)\n\nwith open(\"output-file.ext\", \"w\") as f:\n    f.write(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.logoutUser();\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.LogoutUser(context.Background())\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nresult = sdk.user.logout_user()\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await petstore.user.createUsersWithArrayInput(input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\nresponse, err := client.User.CreateUsersWithArrayInput(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = [\n    {\n        \"id_\": 10,\n        \"username\": \"username\",\n        \"first_name\": \"firstName\",\n        \"last_name\": \"lastName\",\n        \"email\": \"email\",\n        \"password\": \"password\",\n        \"phone\": \"phone\",\n        \"user_status\": 3\n    }\n]\n\nresult = sdk.user.create_users_with_array_input(request_body=request_body)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "code": "import { Petstore, User } from 'petstore';\n\n(async () => {\n  const petstore = new Petstore({\n    token: 'YOUR_TOKEN',\n  });\n\n  const user: User = {\n    id: 7,\n    username: 'username',\n    firstName: 'firstName',\n    lastName: 'lastName',\n    email: 'email',\n    password: 'password',\n    phone: 'phone',\n    userStatus: 8,\n  };\n\n  const { data } = await petstore.user.createUser(input);\n\n  console.log(data);\n})();\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "typescript"
            },
            {
              "code": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstoreconfig\"\n  \"github.com/swagger-api/swagger-petstore/pkg/petstore\"\n  \"github.com/swagger-api/swagger-petstore/pkg/user\"\n)\n\nconfig := petstoreconfig.NewConfig()\nclient := petstore.NewPetstore(config)\n\n\nrequest := user.User{}\n\nresponse, err := client.User.CreateUser(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "go"
            },
            {
              "code": "from petstore import Petstore\nfrom petstore.models import User\n\nsdk = Petstore(\n    access_token=\"YOUR_ACCESS_TOKEN\",\n    timeout=10000\n)\n\nrequest_body = User(\n    id_=10,\n    username=\"username\",\n    first_name=\"firstName\",\n    last_name=\"lastName\",\n    email=\"email\",\n    password=\"password\",\n    phone=\"phone\",\n    user_status=3\n)\n\nresult = sdk.user.create_user(request_body=request_body)\n\nprint(result)\n\n```\n\n<!-- This file was generated by liblab | https://liblab.com/",
              "language": "python"
            }
          ]
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read:pets": "read your pets",
        "write:pets": "modify pets in your account"
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "wrapped": true
          },
          "items": {
            "type": "string",
            "xml": {
              "name": "photoUrl"
            }
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "wrapped": true
          },
          "items": {
            "xml": {
              "name": "tag"
            },
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "x-samples-languages": [
    "node",
    "go",
    "python"
  ]
}